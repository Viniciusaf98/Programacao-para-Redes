import time
import hashlib
from tabulate import tabulate

def calcular_hash(dados):
    # Calcula o hash SHA-256 dos dados fornecidos
    return hashlib.sha256(dados).hexdigest()

def encontrar_nonce(dados_para_hash, bits_iniciais_zero):
    nonce = 0
    tempo_inicial = time.time()
    
    # Define o valor alvo baseado na quantidade de bits zero desejados
    alvo = (1 << (256 - bits_iniciais_zero))  # Valor de comparação para os bits zero

    while True:
        # Adiciona o nonce aos dados e calcula o hash
        dados_com_nonce = dados_para_hash + nonce.to_bytes((nonce.bit_length() + 7) // 8, 'big')
        resultado_hash = calcular_hash(dados_com_nonce)
        
        # Converte o hash de hexadecimal para binário
        hash_binario = bin(int(resultado_hash, 16))[2:].zfill(256)
        
        # Verifica se os primeiros bits do hash são zero conforme solicitado
        if hash_binario[:bits_iniciais_zero] == '0' * bits_iniciais_zero:
            break
        
        nonce += 1
    
    tempo_final = time.time() - tempo_inicial
    return nonce, tempo_final

def gerar_resultados():
    # Lista de testes com os textos e os bits desejados
    testes = [
        ("Texto simples", 8),
        ("Texto simples", 10),
        ("Texto simples", 15),
        ("Texto maior altera tempo?", 8),
        ("Texto maior altera tempo?", 10),
        ("Texto maior altera tempo?", 15),
        ("Pode calcular isso?", 18),
        ("Pode calcular isso?", 19),
        ("Pode calcular isso?", 20)
    ]
    
    resultados = []
    
    for texto, bits in testes:
        # Converte o texto para bytes
        dados_bytes = texto.encode('utf-8')
        # Chama a função para encontrar o nonce e o tempo gasto
        nonce_encontrado, tempo_gasto = encontrar_nonce(dados_bytes, bits)
        # Armazena os resultados na lista
        resultados.append([texto, bits, nonce_encontrado, f"{tempo_gasto:.6f}"])
    
    # Exibe a tabela no terminal com a formatação
    print(tabulate(resultados, headers=["Texto para Validar", "Bits Zero", "Nonce", "Tempo (s)"], tablefmt="fancy_grid"))
    
    # Salva a tabela no arquivo 'resultados.txt'
    with open("resultados.txt", "w") as arquivo:
        arquivo.write(tabulate(resultados, headers=["Texto para Validar", "Bits Zero", "Nonce", "Tempo (s)"], tablefmt="fancy_grid"))
    
    print("Tabela salva no arquivo: 'resultados.txt'.")

if __name__ == "__main__":
    gerar_resultados()
